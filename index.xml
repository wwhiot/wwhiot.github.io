<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://wwhiot.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jul 2019 10:31:26 +0800</lastBuildDate>
    
	<atom:link href="https://wwhiot.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>tcp 粘包 Spring运行机制</title>
      <link>https://wwhiot.github.io/post/first-blog/</link>
      <pubDate>Sat, 27 Jul 2019 10:31:26 +0800</pubDate>
      
      <guid>https://wwhiot.github.io/post/first-blog/</guid>
      <description>说一下 tcp 粘包是怎么产生的？
粘包发生在发送或接收缓冲区中；应用程序从缓冲区中取数据是整个缓冲区中有多少取多少；那么就有可能第一个数据的尾部和第二个数据的头部同时存在缓冲区，而TCP是流式的，数据无边界，这时发生粘包。
1.发送方产生粘包
采用TCP协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据；但当发送的数据包过于的小时，那么TCP协议默认的会启用Nagle算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了； 2.接收方产生粘包
接收方采用TCP协议接收数据时的过程是这样的：数据到底接收方，从网络模型的下方传递至传输层，传输层的TCP协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C语言用recv、read等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包；（放数据的速度 &amp;gt; 应用层拿数据速度） TCP粘包解决方案 目前应用最广泛的是在消息的头部添加数据包长度，接收方根据消息长度进行接收；在一条TCP连接上，数据的流式传输在接收缓冲区里是有序的，其主要的问题就是第一个包的包尾与第二个包的包头共存接收缓冲区，所以根据长度读取是十分合适的；
1.解决发送方粘包
（1）发送产生是因为Nagle算法合并小数据包，那么可以禁用掉该算法；
（2）TCP提供了强制数据立即传送的操作指令push，当填入数据后调用操作指令就可以立即将数据发送，而不必等待发送缓冲区填充自动发送；
（3）数据包中加头，头部信息为整个数据的长度（最广泛最常用）；
2.解决接收方粘包
（1）解析数据包头部信息，根据长度来接收；
（2）自定义数据格式：在数据中放入开始、结束标识；解析时根据格式抓取数据，缺点是数据内不能含有开始或结束标识
（3）短连接传输，建立一次连接只传输一次数据就关闭；（不推荐） Spring运行机制是什么机制。 spring的最初两大核心思想：控制反转IoC，依赖注入DI（后来引入第三个核心思想：AOP面向切面编程）。
如何将字符串反转 1. 使用Array.Reverse方法
对于字符串反转，我们可以使用.NET类库自带的Array.Reverse方法
public static string ReverseByArray(string original) { char[] c = original.ToCharArray(); Array.Reverse&amp;copy;; return new string&amp;copy;; } 2. 使用字符缓存 3. 使用StringBuilder 4. 栈是一个很神奇的数据结构。我们可以使用它后进先出的特性来对数组进行反转。先将数组所有元素压入栈，然后再取出，顺序很自然地就与原先相反了。 5. 使用逻辑异或也可以进行反转 6. 使用指针 7. 使用递归 8. 使用委托，还可以使代码变得更加简洁 9. System.Enumerable里提供了默认的Reverse扩展方法，我们可以基于该方法来对String类型进行扩展</description>
    </item>
    
  </channel>
</rss>